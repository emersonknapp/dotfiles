##
# You should look at the following URL's in order to grasp a solid understanding
# of Nginx configuration files in order to fully unleash the power of Nginx.
# https://www.nginx.com/resources/wiki/start/
# https://www.nginx.com/resources/wiki/start/topics/tutorials/config_pitfalls/
# https://wiki.debian.org/Nginx/DirectoryStructure
#
# In most cases, administrators will remove this file from sites-enabled/ and
# leave it as reference inside of sites-available where it will continue to be
# updated by the nginx packaging team.
#
# This file will automatically load configuration files provided by other
# applications, such as Drupal or Wordpress. These applications will be made
# available underneath a path with that package name, such as /drupal8.
#
# Please see /usr/share/doc/nginx-doc/examples/ for more detailed examples.
##

server {
	if ($host = jellyfin.snark.works) {
			return 301 https://$host$request_uri;
	} # managed by Certbot
	if ($host = snark.works) {
			return 301 https://$host$request_uri;
	} # managed by Certbot

	listen 80 ;
	listen [::]:80 ;

	root /var/www/html;

	index index.html index.htm index.nginx-debian.html;
    server_name jellyfin.snark.works; # managed by Certbot


	location / {
		# First attempt to serve request as file, then
		# as directory, then fall back to displaying a 404.
		try_files $uri $uri/ =404;
	}
}

server {
	listen 443 ssl; # managed by Certbot
	listen [::]:443 ssl ipv6only=on; # managed by Certbot

	server_name snark.works; # managed by Certbot

	root /var/www/html;

	# Add index.php to the list if you are using PHP
	index index.html index.htm index.nginx-debian.html;


	location / {
		# First attempt to serve request as file, then
		# as directory, then fall back to displaying a 404.
		try_files $uri $uri/ =404;
	}

	ssl_certificate /etc/letsencrypt/live/snark.works/fullchain.pem; # managed by Certbot
	ssl_certificate_key /etc/letsencrypt/live/snark.works/privkey.pem; # managed by Certbot
	include /etc/letsencrypt/options-ssl-nginx.conf; # managed by Certbot
	ssl_dhparam /etc/letsencrypt/ssl-dhparams.pem; # managed by Certbot

	add_header Strict-Transport-Security "max-age=31536000" always; # managed by Certbot

	ssl_trusted_certificate /etc/letsencrypt/live/snark.works/chain.pem; # managed by Certbot
	ssl_stapling on; # managed by Certbot
	ssl_stapling_verify on; # managed by Certbot
}

server {
	listen [::]:443 ssl; # managed by Certbot
	listen 443 ssl; # managed by Certbot

	server_name jellyfin.snark.works; # managed by Certbot

	## The default `client_max_body_size` is 1M, this might not be enough for some posters, etc.
	client_max_body_size 20M;

	# Comment next line to allow TLSv1.0 and TLSv1.1 if you have very old clients
	# ssl_protocols TLSv1.3 TLSv1.2;

	ssl_certificate /etc/letsencrypt/live/jellyfin.snark.works/fullchain.pem; # managed by Certbot
	ssl_certificate_key /etc/letsencrypt/live/jellyfin.snark.works/privkey.pem; # managed by Certbot
	include /etc/letsencrypt/options-ssl-nginx.conf; # managed by Certbot
	ssl_dhparam /etc/letsencrypt/ssl-dhparams.pem; # managed by Certbot
	ssl_trusted_certificate /etc/letsencrypt/live/jellyfin.snark.works/chain.pem; # managed by Certbot

	set $jellyfin 127.0.0.1;

	# Security / XSS Mitigation Headers
	add_header X-Content-Type-Options "nosniff";

	# Permissions policy. May cause issues with some clients
	add_header Permissions-Policy "accelerometer=(), ambient-light-sensor=(), battery=(), bluetooth=(), camera=(), clipboard-read=(), display-capture=(), document-domain=(), encrypted-media=(), gamepad=(), geolocation=(), gyroscope=(), hid=(), idle-detection=(), interest-cohort=(), keyboard-map=(), local-fonts=(), magnetometer=(), microphone=(), payment=(), publickey-credentials-get=(), serial=(), sync-xhr=(), usb=(), xr-spatial-tracking=()" always;

	# Content Security Policy
	# See: https://developer.mozilla.org/en-US/docs/Web/HTTP/CSP
	# Enforces https content and restricts JS/CSS to origin
	# External Javascript (such as cast_sender.js for Chromecast) must be whitelisted.
	# add_header Content-Security-Policy "default-src https: data: blob: ; img-src 'self' https://* ; style-src 'self' 'unsafe-inline'; script-src 'self' 'unsafe-inline' https://www.gstatic.com https://www.youtube.com blob:; worker-src 'self' blob:; connect-src 'self'; object-src 'none'; frame-ancestors 'self'; font-src 'self'";

	add_header Strict-Transport-Security "max-age=31536000" always; # managed by Certbot

	ssl_stapling on; # managed by Certbot
	ssl_stapling_verify on; # managed by Certbot

	location / {
		# Proxy main Jellyfin traffic
		proxy_pass http://$jellyfin:8096;
		proxy_set_header Host $host;
		proxy_set_header X-Real-IP $remote_addr;
		proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
		proxy_set_header X-Forwarded-Proto $scheme;
		proxy_set_header X-Forwarded-Protocol $scheme;
		proxy_set_header X-Forwarded-Host $http_host;

		# Disable buffering when the nginx proxy gets very resource heavy upon streaming
		proxy_buffering off;
	}

	location /socket {
			# Proxy Jellyfin Websockets traffic
			proxy_pass http://$jellyfin:8096;
			proxy_http_version 1.1;
			proxy_set_header Upgrade $http_upgrade;
			proxy_set_header Connection "upgrade";
			proxy_set_header Host $host;
			proxy_set_header X-Real-IP $remote_addr;
			proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
			proxy_set_header X-Forwarded-Proto $scheme;
			proxy_set_header X-Forwarded-Protocol $scheme;
			proxy_set_header X-Forwarded-Host $http_host;
	}
}

server {
	listen 80 default_server;
	listen [::]:80 default_server;

	root /var/www/html;

	index index.html index.htm index.nginx-debian.html;

	server_name _;

	location / {
		# First attempt to serve request as file, then
		# as directory, then fall back to displaying a 404.
		try_files $uri $uri/ =404;
	}
}
